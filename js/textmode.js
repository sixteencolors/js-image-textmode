(function() {
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  };
  this.ImageTextModePalette = (function() {
    function ImageTextModePalette(options) {
      var k, v;
      this.colors = [];
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    ImageTextModePalette.prototype.toRgbaString = function(color) {
      return 'rgba(' + color.join(',') + ',1)';
    };
    return ImageTextModePalette;
  })();
  this.ImageTextModePaletteVGA = (function() {
    __extends(ImageTextModePaletteVGA, this.ImageTextModePalette);
    function ImageTextModePaletteVGA(options) {
      var k, v;
      ImageTextModePaletteVGA.__super__.constructor.apply(this, arguments);
      this.colors = [[0x00, 0x00, 0x00], [0x00, 0x00, 0xaa], [0x00, 0xaa, 0x00], [0x00, 0xaa, 0xaa], [0xaa, 0x00, 0x00], [0xaa, 0x00, 0xaa], [0xaa, 0x55, 0x00], [0xaa, 0xaa, 0xaa], [0x55, 0x55, 0x55], [0x55, 0x55, 0xff], [0x55, 0xff, 0x55], [0x55, 0xff, 0xff], [0xff, 0x55, 0x55], [0xff, 0x55, 0xff], [0xff, 0xff, 0x55], [0xff, 0xff, 0xff]];
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    return ImageTextModePaletteVGA;
  }).call(this);
  this.ImageTextModePaletteANSI = (function() {
    __extends(ImageTextModePaletteANSI, this.ImageTextModePalette);
    function ImageTextModePaletteANSI(options) {
      var k, v;
      ImageTextModePaletteANSI.__super__.constructor.apply(this, arguments);
      this.colors = [[0x00, 0x00, 0x00], [0xaa, 0x00, 0x00], [0x00, 0xaa, 0x00], [0xaa, 0x55, 0x00], [0x00, 0x00, 0xaa], [0xaa, 0x00, 0xaa], [0x00, 0xaa, 0xaa], [0xaa, 0xaa, 0xaa], [0x55, 0x55, 0x55], [0xff, 0x55, 0x55], [0x55, 0xff, 0x55], [0xff, 0xff, 0x55], [0x55, 0x55, 0xff], [0xff, 0x55, 0xff], [0x55, 0xff, 0xff], [0xff, 0xff, 0xff]];
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    return ImageTextModePaletteANSI;
  }).call(this);
  this.ImageTextModeFont = (function() {
    function ImageTextModeFont(options) {
      var k, v;
      this.chars = [];
      this.width = 8;
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    return ImageTextModeFont;
  })();
  this.ImageTextModeFont8x16 = (function() {
    __extends(ImageTextModeFont8x16, this.ImageTextModeFont);
    function ImageTextModeFont8x16(options) {
      var k, v;
      ImageTextModeFont8x16.__super__.constructor.apply(this, arguments);
      this.chars = [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], [0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00], [0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff], [0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00], [0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00], [0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00], [0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xd6, 0xd6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00], [0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xd6, 0xfe, 0xee, 0x6c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x7c, 0x38, 0x38, 0x7c, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfe, 0xc6, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00], [0x00, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x1c, 0x36, 0x32, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00], [0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00], [0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00], [0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x18, 0x70, 0x00, 0x00], [0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x18, 0x70, 0x00, 0x00], [0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x38, 0x6c, 0x38, 0x10, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x0c, 0x18, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x36, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00], [0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00], [0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x18, 0x18, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00], [0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00], [0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x60, 0xe0, 0x62, 0x66, 0x6c, 0x18, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00, 0x00], [0x00, 0x60, 0xe0, 0x62, 0x66, 0x6c, 0x18, 0x30, 0x66, 0xce, 0x9a, 0x3f, 0x06, 0x06, 0x00, 0x00], [0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44], [0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa], [0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0], [0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f], [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00], [0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00], [0x00, 0x6c, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x3c, 0x66, 0x0c, 0x18, 0x32, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]];
      this.height = 16;
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    return ImageTextModeFont8x16;
  }).call(this);
  this.ImageTextModeFont8x8 = (function() {
    __extends(ImageTextModeFont8x8, this.ImageTextModeFont);
    function ImageTextModeFont8x8(options) {
      var k, v;
      ImageTextModeFont8x8.__super__.constructor.apply(this, arguments);
      this.chars = [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e], [0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e], [0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00], [0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00], [0x38, 0x7c, 0x38, 0xfe, 0xfe, 0xd6, 0x10, 0x38], [0x10, 0x38, 0x7c, 0xfe, 0xfe, 0x7c, 0x10, 0x38], [0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00], [0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff], [0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00], [0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff], [0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78], [0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18], [0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0], [0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0], [0x18, 0xdb, 0x3c, 0xe7, 0xe7, 0x3c, 0xdb, 0x18], [0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00], [0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00], [0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18], [0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00], [0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00], [0x3e, 0x61, 0x3c, 0x66, 0x66, 0x3c, 0x86, 0x7c], [0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00], [0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff], [0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00], [0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00], [0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00], [0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00], [0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00], [0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00], [0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00], [0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00], [0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00], [0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00], [0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00], [0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00], [0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00], [0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00], [0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00], [0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00], [0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00], [0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30], [0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00], [0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00], [0x38, 0x6c, 0xc6, 0xd6, 0xc6, 0x6c, 0x38, 0x00], [0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00], [0x7c, 0xc6, 0x06, 0x1c, 0x30, 0x66, 0xfe, 0x00], [0x7c, 0xc6, 0x06, 0x3c, 0x06, 0xc6, 0x7c, 0x00], [0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00], [0xfe, 0xc0, 0xc0, 0xfc, 0x06, 0xc6, 0x7c, 0x00], [0x38, 0x60, 0xc0, 0xfc, 0xc6, 0xc6, 0x7c, 0x00], [0xfe, 0xc6, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00], [0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00], [0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00], [0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00], [0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30], [0x06, 0x0c, 0x18, 0x30, 0x18, 0x0c, 0x06, 0x00], [0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00], [0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00], [0x7c, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x00], [0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00], [0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00], [0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00], [0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00], [0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00], [0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00], [0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00], [0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3a, 0x00], [0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00], [0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00], [0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00], [0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00], [0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00], [0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00], [0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00], [0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00], [0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xce, 0x7c, 0x0e], [0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00], [0x3c, 0x66, 0x30, 0x18, 0x0c, 0x66, 0x3c, 0x00], [0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x3c, 0x00], [0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00], [0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00], [0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00], [0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00], [0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00], [0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00], [0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00], [0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00], [0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff], [0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00], [0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xdc, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc6, 0x7c, 0x00], [0x1c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00], [0x3c, 0x66, 0x60, 0xf8, 0x60, 0x60, 0xf0, 0x00], [0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8], [0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00], [0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00], [0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c], [0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00], [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00], [0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0x00], [0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x00], [0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0], [0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e], [0x00, 0x00, 0xdc, 0x76, 0x60, 0x60, 0xf0, 0x00], [0x00, 0x00, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x00], [0x30, 0x30, 0xfc, 0x30, 0x30, 0x36, 0x1c, 0x00], [0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00], [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00], [0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00], [0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00], [0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0xfc], [0x00, 0x00, 0x7e, 0x4c, 0x18, 0x32, 0x7e, 0x00], [0x0e, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0e, 0x00], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00], [0x70, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x70, 0x00], [0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00], [0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x0c, 0x78], [0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00], [0x0c, 0x18, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00], [0x7c, 0x82, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00], [0xc6, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00], [0x30, 0x18, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00], [0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00], [0x00, 0x00, 0x7e, 0xc0, 0xc0, 0x7e, 0x0c, 0x38], [0x7c, 0x82, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00], [0xc6, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00], [0x30, 0x18, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00], [0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00], [0x7c, 0x82, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00], [0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00], [0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00], [0x38, 0x6c, 0x7c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00], [0x18, 0x30, 0xfe, 0xc0, 0xf8, 0xc0, 0xfe, 0x00], [0x00, 0x00, 0x7e, 0x18, 0x7e, 0xd8, 0x7e, 0x00], [0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00], [0x7c, 0x82, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0x30, 0x18, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0x78, 0x84, 0x00, 0xcc, 0xcc, 0xcc, 0x76, 0x00], [0x60, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00], [0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0xfc], [0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x00], [0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18], [0x38, 0x6c, 0x64, 0xf0, 0x60, 0x66, 0xfc, 0x00], [0x66, 0x66, 0x3c, 0x7e, 0x18, 0x7e, 0x18, 0x18], [0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7], [0x0e, 0x1b, 0x18, 0x3c, 0x18, 0xd8, 0x70, 0x00], [0x18, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00], [0x0c, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00], [0x0c, 0x18, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00], [0x18, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00], [0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x00], [0x76, 0xdc, 0x00, 0xe6, 0xf6, 0xde, 0xce, 0x00], [0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00], [0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00], [0x18, 0x00, 0x18, 0x18, 0x30, 0x63, 0x3e, 0x00], [0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0x00, 0x00], [0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x00, 0x00], [0x63, 0xe6, 0x6c, 0x7e, 0x33, 0x66, 0xcc, 0x0f], [0x63, 0xe6, 0x6c, 0x7a, 0x36, 0x6a, 0xdf, 0x06], [0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x18, 0x00], [0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00], [0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00], [0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88], [0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa], [0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18], [0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18], [0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36], [0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36], [0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18], [0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36], [0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36], [0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00], [0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00], [0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18], [0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18], [0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18], [0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36], [0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36], [0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00], [0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36], [0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36], [0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00], [0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36], [0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00], [0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00], [0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18], [0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00], [0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00], [0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18], [0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36], [0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36], [0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18], [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff], [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0], [0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f], [0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00], [0x78, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xcc, 0x00], [0xfe, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00], [0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x00], [0xfe, 0xc6, 0x60, 0x30, 0x60, 0xc6, 0xfe, 0x00], [0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00], [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0xc0], [0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00], [0x7e, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x7e], [0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00], [0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00], [0x0e, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x3c, 0x00], [0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00], [0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0], [0x1e, 0x30, 0x60, 0x7e, 0x60, 0x30, 0x1e, 0x00], [0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00], [0x00, 0xfe, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0x00], [0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x7e, 0x00], [0x30, 0x18, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00], [0x0c, 0x18, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00], [0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18], [0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70], [0x00, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x00, 0x00], [0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00], [0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00], [0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c], [0x6c, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00], [0x78, 0x0c, 0x18, 0x30, 0x7c, 0x00, 0x00, 0x00], [0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]];
      this.height = 8;
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    return ImageTextModeFont8x8;
  }).call(this);
  this.ImageTextModeFontAmiga = (function() {
    __extends(ImageTextModeFontAmiga, this.ImageTextModeFont);
    function ImageTextModeFontAmiga(options) {
      var k, v;
      ImageTextModeFontAmiga.__super__.constructor.apply(this, arguments);
      this.chars = [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, 0x00], [0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00], [0x18, 0x3e, 0x60, 0x60, 0x3c, 0x06, 0x06, 0x7c, 0x18, 0x00, 0x00], [0x00, 0xc0, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x06, 0x00, 0x00], [0x38, 0x6c, 0x6c, 0x68, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00], [0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00], [0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00], [0x00, 0x66, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x66, 0x00, 0x00, 0x00], [0x00, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00], [0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00], [0x00, 0x03, 0x06, 0x04, 0x0c, 0x18, 0x30, 0x20, 0x60, 0xc0, 0x00], [0x3c, 0x66, 0x66, 0x76, 0x7e, 0x6e, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x18, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00], [0x3c, 0x66, 0x66, 0x06, 0x0c, 0x18, 0x30, 0x66, 0x7e, 0x00, 0x00], [0x3c, 0x66, 0x06, 0x06, 0x1c, 0x06, 0x06, 0x66, 0x3c, 0x00, 0x00], [0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00], [0x7e, 0x60, 0x60, 0x7c, 0x06, 0x06, 0x06, 0x66, 0x3c, 0x00, 0x00], [0x1c, 0x30, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x7e, 0x66, 0x06, 0x06, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00], [0x3c, 0x66, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x3c, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x0c, 0x38, 0x00, 0x00], [0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00], [0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00], [0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00], [0x3c, 0x66, 0x06, 0x06, 0x0c, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00], [0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0xc0, 0x78, 0x00, 0x00], [0x18, 0x3c, 0x3c, 0x66, 0x66, 0x7e, 0xc3, 0xc3, 0xc3, 0x00, 0x00], [0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00], [0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00, 0x00], [0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00], [0xfe, 0x66, 0x60, 0x60, 0x78, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00], [0xfe, 0x66, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00], [0x3c, 0x66, 0xc0, 0xc0, 0xce, 0xc6, 0xc6, 0x66, 0x3e, 0x00, 0x00], [0x66, 0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00], [0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00], [0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0xe6, 0x66, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00], [0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00], [0x82, 0x82, 0xc6, 0xc6, 0xee, 0xfe, 0xd6, 0xd6, 0xc6, 0x00, 0x00], [0x86, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc2, 0x00, 0x00], [0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00], [0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00], [0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x3c, 0x06, 0x03], [0xfc, 0x66, 0x66, 0x66, 0x7c, 0x78, 0x6c, 0x66, 0xf3, 0x00, 0x00], [0x3c, 0x66, 0x66, 0x30, 0x18, 0x0c, 0x06, 0x66, 0x3c, 0x00, 0x00], [0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00], [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 0x00], [0xc3, 0xc3, 0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x00], [0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0xee, 0xee, 0xc6, 0xc6, 0x00, 0x00], [0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00], [0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00], [0xfe, 0xc6, 0x86, 0x0c, 0x18, 0x30, 0x62, 0xc6, 0xfe, 0x00, 0x00], [0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00], [0x00, 0xc0, 0x60, 0x20, 0x30, 0x18, 0x0c, 0x04, 0x06, 0x03, 0x00], [0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00], [0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe], [0x18, 0x18, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x3c, 0x06, 0x1e, 0x66, 0x66, 0x3b, 0x00, 0x00], [0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00], [0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x00, 0x00], [0x0e, 0x06, 0x06, 0x36, 0x6e, 0x66, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x7e, 0x60, 0x3c, 0x00, 0x00], [0x1c, 0x36, 0x30, 0x30, 0x78, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00], [0x00, 0x00, 0x00, 0x3b, 0x66, 0x66, 0x66, 0x3c, 0xc6, 0xc6, 0x7c], [0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00], [0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00], [0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x3c], [0xe0, 0x60, 0x66, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00], [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00], [0x00, 0x00, 0x00, 0xcc, 0xee, 0xfe, 0xd6, 0xd6, 0xc6, 0x00, 0x00], [0x00, 0x00, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00], [0x00, 0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0], [0x00, 0x00, 0x00, 0x3d, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x07], [0x00, 0x00, 0x00, 0xec, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00], [0x00, 0x00, 0x00, 0x3e, 0x70, 0x38, 0x1c, 0x0e, 0x7c, 0x00, 0x00], [0x08, 0x18, 0x18, 0x3e, 0x18, 0x18, 0x18, 0x1a, 0x0c, 0x00, 0x00], [0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x00, 0x00], [0x00, 0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xd6, 0x6c, 0x6c, 0x00, 0x00], [0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00], [0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x30, 0xe0], [0x00, 0x00, 0x00, 0x7e, 0x4c, 0x18, 0x30, 0x62, 0x7e, 0x00, 0x00], [0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00], [0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00], [0x62, 0xba, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 0xcc, 0x33, 0xcc], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00], [0x0c, 0x0c, 0x3e, 0x6c, 0x6c, 0x6c, 0x3e, 0x0c, 0x0c, 0x00, 0x00], [0x1c, 0x36, 0x30, 0x30, 0x78, 0x30, 0x30, 0x30, 0x7e, 0x00, 0x00], [0x66, 0x66, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x00, 0x00], [0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00], [0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00], [0x3c, 0x60, 0x60, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x06, 0x06, 0x3c], [0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x81, 0x81, 0x9d, 0xb1, 0xb1, 0xb1, 0x9d, 0x81, 0x7e, 0x00], [0x3c, 0xcc, 0xcc, 0x76, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x7e, 0x81, 0xb1, 0xb9, 0xb9, 0xb1, 0xa9, 0xa5, 0x81, 0x7e, 0x00], [0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x3c, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x00], [0x78, 0x0c, 0x0c, 0x18, 0x30, 0x60, 0x7c, 0x00, 0x00, 0x00, 0x00], [0x78, 0x0c, 0x0c, 0x38, 0x0c, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00], [0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x6e, 0x7a, 0x60, 0x60, 0x00], [0x7e, 0xf4, 0xf4, 0xf4, 0x74, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00], [0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x18], [0x18, 0x38, 0x38, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00], [0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00], [0x00, 0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00, 0x00, 0x00], [0x40, 0xc6, 0x4c, 0x58, 0x72, 0x66, 0xce, 0x02, 0x02, 0x00, 0x00], [0x20, 0x63, 0x26, 0x2c, 0x3b, 0x31, 0x62, 0xc4, 0x0f, 0x00, 0x00], [0xc0, 0x63, 0xc6, 0x6c, 0xd9, 0x33, 0x67, 0xc1, 0x01, 0x00, 0x00], [0x18, 0x18, 0x00, 0x18, 0x30, 0x60, 0x60, 0x66, 0x3c, 0x00, 0x00], [0x60, 0x30, 0x08, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00], [0x0c, 0x18, 0x20, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00], [0x30, 0x48, 0x84, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00], [0x72, 0x9c, 0x00, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00], [0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00], [0x38, 0x6c, 0x38, 0x6c, 0x6c, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00], [0x1f, 0x3c, 0x3c, 0x6c, 0x6f, 0xfc, 0xcc, 0xcc, 0xcf, 0x00, 0x00], [0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x18, 0x30], [0x60, 0x18, 0xfe, 0x60, 0x60, 0x7c, 0x60, 0x60, 0xfe, 0x00, 0x00], [0x18, 0x60, 0xfe, 0x60, 0x60, 0x7c, 0x60, 0x60, 0xfe, 0x00, 0x00], [0x18, 0x24, 0xfe, 0x60, 0x60, 0x7c, 0x60, 0x60, 0xfe, 0x00, 0x00], [0x66, 0x00, 0xfe, 0x60, 0x60, 0x7c, 0x60, 0x60, 0xfe, 0x00, 0x00], [0x30, 0x0c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00], [0x0c, 0x30, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00], [0x18, 0x24, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00], [0x66, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00], [0xf8, 0x6c, 0x66, 0x66, 0xf6, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00], [0x71, 0x8e, 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc2, 0x00, 0x00], [0x30, 0x0c, 0x3c, 0x66, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00], [0x0c, 0x30, 0x3c, 0x66, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00], [0x18, 0x24, 0x3c, 0x66, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00], [0x71, 0x8e, 0x3c, 0x66, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00], [0x66, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00], [0x00, 0x00, 0x63, 0x36, 0x1c, 0x1c, 0x36, 0x63, 0x00, 0x00, 0x00], [0x3c, 0x66, 0xc7, 0xcf, 0xdb, 0xf3, 0xe3, 0x66, 0x3c, 0x00, 0x00], [0x60, 0x30, 0x08, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 0x00], [0x06, 0x0c, 0x10, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 0x00], [0x18, 0x24, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 0x00], [0x66, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00, 0x00], [0x06, 0x18, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00], [0xf0, 0x60, 0x7e, 0x63, 0x63, 0x63, 0x7e, 0x60, 0x60, 0x60, 0xf0], [0x7c, 0x66, 0x66, 0x66, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0x60, 0x60], [0x60, 0x30, 0x08, 0x3c, 0x06, 0x1e, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x06, 0x0c, 0x10, 0x3c, 0x06, 0x1e, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x18, 0x24, 0x42, 0x3c, 0x06, 0x1e, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x71, 0x8e, 0x00, 0x3c, 0x06, 0x1e, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x66, 0x66, 0x00, 0x3c, 0x06, 0x1e, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x3c, 0x66, 0x66, 0x3c, 0x06, 0x1e, 0x66, 0x66, 0x3b, 0x00, 0x00], [0x00, 0x00, 0x00, 0x7e, 0x1b, 0x7f, 0xd8, 0xd8, 0x77, 0x00, 0x00], [0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x08, 0x30], [0x60, 0x30, 0x08, 0x3c, 0x66, 0x66, 0x7e, 0x60, 0x3c, 0x00, 0x00], [0x06, 0x0c, 0x10, 0x3c, 0x66, 0x66, 0x7e, 0x60, 0x3c, 0x00, 0x00], [0x18, 0x24, 0x42, 0x3c, 0x66, 0x66, 0x7e, 0x60, 0x3c, 0x00, 0x00], [0x66, 0x66, 0x00, 0x3c, 0x66, 0x66, 0x7e, 0x60, 0x3c, 0x00, 0x00], [0x60, 0x30, 0x08, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00], [0x0c, 0x18, 0x20, 0x70, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00], [0x18, 0x24, 0x42, 0x1c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00], [0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00], [0x6c, 0x30, 0xd8, 0x0c, 0x7e, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00], [0x71, 0x8e, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00], [0x60, 0x30, 0x08, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x06, 0x0c, 0x10, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x18, 0x24, 0x42, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x71, 0x8e, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x66, 0x66, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00], [0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00], [0x00, 0x00, 0x00, 0x7c, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00, 0x00], [0x60, 0x30, 0x08, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00], [0x0c, 0x18, 0x20, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00], [0x30, 0x48, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00], [0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00], [0x06, 0x0c, 0x10, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x70], [0xf0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0], [0x66, 0x66, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x70]];
      this.height = 11;
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    return ImageTextModeFontAmiga;
  }).call(this);
  this.ImageTextMode = (function() {
    ImageTextMode.VERSION = '0.01';
    function ImageTextMode(options) {
      var k, v;
      this.screen = [];
      this.palette = new ImageTextModePaletteVGA;
      this.font = new ImageTextModeFont8x16;
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    ImageTextMode.prototype.parseUrl = function(url) {
      var content, req;
      req = new XMLHttpRequest;
      req.open('GET', url, false);
      req.overrideMimeType('text/plain; charset=x-user-defined');
      req.send(null);
      content = req.status === 200 || req.status === 0 ? req.responseText : '';
      return this.parse(content);
    };
    ImageTextMode.prototype.unpackShort = function(data) {
      var shrt;
      shrt = (this.getByteAt(data, 1) << 8) + this.getByteAt(data, 0);
      if (shrt < 0) {
        shrt += 65536;
      }
      return shrt;
    };
    ImageTextMode.prototype.getByteAt = function(data, offset) {
      return data.charCodeAt(offset) & 0xFF;
    };
    ImageTextMode.prototype.getWidth = function() {
      var max, y, _ref;
      max = 0;
      for (y = 0, _ref = this.screen.length - 1; (0 <= _ref ? y <= _ref : y >= _ref); (0 <= _ref ? y += 1 : y -= 1)) {
        if ((this.screen[y] != null) && this.screen[y].length > max) {
          max = this.screen[y].length;
        }
      }
      return max;
    };
    ImageTextMode.prototype.getHeight = function() {
      return this.screen.length;
    };
    ImageTextMode.prototype.renderCanvas = function(canvasElem) {
      var bg, canvas, chr, ctx, cx, cy, fg, h, i, j, line, pixel, px, py, w, _ref, _ref2, _ref3, _ref4;
      w = this.getWidth() * this.font.width;
      h = this.getHeight() * this.font.height;
      canvas = document.createElement('canvas');
      canvas.setAttribute('width', w);
      canvas.setAttribute('height', h);
      ctx = canvas.getContext('2d');
      for (cy = 0, _ref = this.screen.length - 1; (0 <= _ref ? cy <= _ref : cy >= _ref); (0 <= _ref ? cy += 1 : cy -= 1)) {
        if (!(this.screen[cy] != null)) {
          continue;
        }
        for (cx = 0, _ref2 = this.screen[cy].length - 1; (0 <= _ref2 ? cx <= _ref2 : cx >= _ref2); (0 <= _ref2 ? cx += 1 : cx -= 1)) {
          pixel = this.screen[cy][cx];
          if (!(pixel != null)) {
            continue;
          }
          fg = pixel.attr & 15;
          bg = (pixel.attr & 240) >> 4;
          px = cx * 8;
          py = cy * 16;
          ctx.fillStyle = this.palette.toRgbaString(this.palette.colors[bg]);
          ctx.fillRect(px, py, 8, 16);
          ctx.fillStyle = this.palette.toRgbaString(this.palette.colors[fg]);
          chr = this.font.chars[pixel.ch.charCodeAt(0) & 0xff];
          for (i = 0, _ref3 = this.font.height - 1; (0 <= _ref3 ? i <= _ref3 : i >= _ref3); (0 <= _ref3 ? i += 1 : i -= 1)) {
            line = chr[i];
            for (j = 0, _ref4 = this.font.width - 1; (0 <= _ref4 ? j <= _ref4 : j >= _ref4); (0 <= _ref4 ? j += 1 : j -= 1)) {
              if (line & (1 << this.font.width - 1 - j)) {
                ctx.fillRect(px + j, py + i, 1, 1);
              }
            }
          }
        }
      }
      canvasElem.setAttribute('width', w);
      canvasElem.setAttribute('height', h);
      ctx = canvasElem.getContext('2d');
      return ctx.drawImage(canvas, 0, 0);
    };
    return ImageTextMode;
  })();
  this.ImageTextModeXBin = (function() {
    var ATTRIBUTE_COMPRESSION, CHARACTER_COMPRESSION, COMPRESSED, COMPRESSION_COUNTER, COMPRESSION_TYPE, FIVETWELVE_CHARS, FONT, FULL_COMPRESSION, NON_BLINK, NO_COMPRESSION, PALETTE;
    __extends(ImageTextModeXBin, this.ImageTextMode);
    PALETTE = 1;
    FONT = 2;
    COMPRESSED = 4;
    NON_BLINK = 8;
    FIVETWELVE_CHARS = 16;
    NO_COMPRESSION = 0;
    CHARACTER_COMPRESSION = 64;
    ATTRIBUTE_COMPRESSION = 128;
    FULL_COMPRESSION = 192;
    COMPRESSION_TYPE = 192;
    COMPRESSION_COUNTER = 63;
    function ImageTextModeXBin(options) {
      var k, v;
      ImageTextModeXBin.__super__.constructor.apply(this, arguments);
      this.header = {
        width: 0,
        height: 0,
        fontisze: 0,
        flags: 0
      };
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    ImageTextModeXBin.prototype.parse = function(content) {
      var fontlength, headerData, offset;
      this.screen = [];
      headerData = content.substr(0, 11);
      if (headerData.length === !11 || !headerData.match('^XBIN\x1a')) {
        throw new Error('File is not an XBin');
        return;
      }
      this.header.width = this.unpackShort(headerData.substr(5, 2));
      this.header.height = this.unpackShort(headerData.substr(7, 2));
      this.header.fontsize = this.getByteAt(headerData.substr(9, 1));
      this.header.flags = this.getByteAt(headerData.substr(10, 1));
      offset = 11;
      if (this.header.flags & PALETTE) {
        this._parse_palette(content.substr(offset, 48));
        offset += 48;
      }
      if (this.header.flags & FONT) {
        fontlength = this.header.fontsize;
        if (this.header.flags & FIVETWELVE_CHARS) {
          fontlength *= 512;
        } else {
          fontlength *= 256;
        }
        this._parse_font(content.substr(offset, fontlength));
        offset += fontlength;
      }
      if (this.header.flags & COMPRESSED) {
        return this._parse_compressed(content.substr(offset));
      } else {
        return this._parse_uncompressed(content.substr(offset));
      }
    };
    ImageTextModeXBin.prototype._parse_palette = function(data) {
      var b, colors, g, i, r;
      colors = [];
      for (i = 0; i <= 45; i += 3) {
        r = this.getByteAt(data, i);
        r = r << 2 | r >> 4;
        g = this.getByteAt(data, i + 1);
        g = g << 2 | g >> 4;
        b = this.getByteAt(data, i + 2);
        b = b << 2 | b >> 4;
        colors[i / 3] = [r, g, b];
      }
      return this.palette = new ImageTextModePalette({
        colors: colors
      });
    };
    ImageTextModeXBin.prototype._parse_font = function(data) {
      var chars, chr, height, i, j, _ref, _ref2;
      height = this.header.fontsize;
      chars = [];
      for (i = 0, _ref = data.length / height - 1; (0 <= _ref ? i <= _ref : i >= _ref); (0 <= _ref ? i += 1 : i -= 1)) {
        chr = [];
        for (j = 0, _ref2 = height - 1; (0 <= _ref2 ? j <= _ref2 : j >= _ref2); (0 <= _ref2 ? j += 1 : j -= 1)) {
          chr.push(this.getByteAt(data, i * height + j));
        }
        chars.push(chr);
      }
      return this.font = new ImageTextModeFont({
        chars: chars,
        height: height
      });
    };
    ImageTextModeXBin.prototype._parse_compressed = function(data) {
      var attr, ch, counter, info, type, x, y, _results;
      x = 0;
      y = 0;
      this.screen[y] = [];
      data = data.split('');
      _results = [];
      while (info = data.shift()) {
        info = this.getByteAt(info, 0);
        if (info === 26) {
          break;
        }
        type = info & COMPRESSION_TYPE;
        counter = (info & COMPRESSION_COUNTER) + 1;
        ch = null;
        attr = null;
        _results.push((function() {
          var _results;
          _results = [];
          while (counter-- > 0) {
            switch (type) {
              case NO_COMPRESSION:
                ch = data.shift();
                attr = data.shift();
                break;
              case CHARACTER_COMPRESSION:
                if (!(ch != null)) {
                  ch = data.shift();
                }
                attr = data.shift();
                break;
              case ATTRIBUTE_COMPRESSION:
                if (!(attr != null)) {
                  attr = data.shift();
                }
                ch = data.shift();
                break;
              default:
                if (!(ch != null)) {
                  ch = data.shift();
                }
                if (!(attr != null)) {
                  attr = data.shift();
                }
            }
            this.screen[y][x] = {
              ch: ch,
              attr: this.getByteAt(attr, 0)
            };
            x++;
            if (x === this.header.width) {
              x = 0;
              y++;
              if (y === this.header.height) {
                break;
              }
              if (!(this.screen[y] != null)) {
                this.screen[y] = [];
              }
            }
          }
          return _results;
        }).call(this));
      }
      return _results;
    };
    ImageTextModeXBin.prototype._parse_uncompressed = function(data) {
      var attr, ch, i, x, y, _ref, _results;
      x = 0;
      y = 0;
      this.screen[y] = [];
      _results = [];
      for (i = 0, _ref = data.length - 3; (0 <= _ref ? i <= _ref : i >= _ref); i += 2) {
        ch = data.substr(i, 1);
        if (ch === "\x1a") {
          break;
        }
        attr = this.getByteAt(data, i + 1);
        this.screen[y][x] = {
          'ch': ch,
          'attr': attr
        };
        x++;
        if (x === this.header.width) {
          x = 0;
          y++;
          if (y === this.header.height) {
            break;
          }
          if (!(this.screen[y] != null)) {
            this.screen[y] = [];
          }
        }
      }
      return _results;
    };
    ImageTextModeXBin.prototype.getWidth = function() {
      return this.header.width;
    };
    ImageTextModeXBin.prototype.getHeight = function() {
      return this.header.height;
    };
    return ImageTextModeXBin;
  }).call(this);
  this.ImageTextModeANSI = (function() {
    __extends(ImageTextModeANSI, this.ImageTextMode);
    function ImageTextModeANSI(options) {
      var k, v;
      ImageTextModeANSI.__super__.constructor.apply(this, arguments);
      this.palette = new ImageTextModePaletteANSI;
      this.tabstop = 8;
      this.linewrap = 80;
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    ImageTextModeANSI.prototype.parse = function(content) {
      var arg, args, ch, i, _i, _len, _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results;
      this.screen = [];
      this.state = 0;
      this.x = 0;
      this.y = 0;
      this.save_x = 0;
      this.save_y = 0;
      this.attr = 7;
      this.argbuf = '';
      content = content.split('');
      _results = [];
      while (ch = content.shift()) {
        if (this.state === 0) {
          switch (ch) {
            case "\x1a":
              this.state = 3;
              break;
            case "\x1b":
              this.state = 1;
              break;
            case "\n":
              this.x = 0;
              this.y++;
              break;
            case "\r":
              break;
            case "\t":
              i = (this.x + 1) % this.tabstop;
              while (i-- > 0) {
                this.putpixel(' ');
              }
              break;
            default:
              this.putpixel(ch);
          }
        } else if (this.state === 1) {
          if (ch !== "[") {
            this.putpixel("\x1b");
            this.putpixel("[");
            this.state = 0;
          } else {
            this.state = 2;
          }
        } else if (this.state === 2) {
          if (ch.match('[A-Za-z]')) {
            args = (function() {
              var _i, _len, _ref, _results;
              _ref = this.argbuf.split(';');
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                i = _ref[_i];
                _results.push(parseInt(i));
              }
              return _results;
            }).call(this);
            switch (ch) {
              case "m":
                for (_i = 0, _len = args.length; _i < _len; _i++) {
                  arg = args[_i];
                  if (arg === 0) {
                    this.attr = 7;
                  } else if (arg === 1) {
                    this.attr |= 8;
                  } else if (arg === 5) {
                    this.attr |= 128;
                  } else if ((30 <= arg && arg <= 37)) {
                    this.attr &= 248;
                    this.attr |= arg - 30;
                  } else if ((40 <= arg && arg <= 47)) {
                    this.attr &= 143;
                    this.attr |= (arg - 40) << 4;
                  }
                }
                break;
              case "H":
              case "f":
                this.y = (args[0] || 1) - 1;
                this.x = (args[1] || 1) - 1;
                if (this.y < 0) {
                  this.y = 0;
                }
                if (this.x < 0) {
                  this.x = 0;
                }
                break;
              case "A":
                this.y -= args[0] || 1;
                if (this.y < 0) {
                  this.y = 0;
                }
                break;
              case "B":
                this.y += args[0] || 1;
                break;
              case "C":
                this.x += args[0] || 1;
                break;
              case "D":
                this.x -= args[0] || 1;
                if (this.x < 0) {
                  this.x = 0;
                }
                break;
              case "E":
                this.y += args[0] || 1;
                this.x = 0;
                break;
              case "F":
                this.y -= args[0] || 1;
                if (this.y > 0) {
                  this.y = 0;
                }
                this.x = 0;
                break;
              case "G":
                this.x = (args[0] || 1) - 1;
                break;
              case "s":
                this.save_x = this.x;
                this.save_y = this.y;
                break;
              case "u":
                this.x = this.save_x;
                this.y = this.save_y;
                break;
              case "J":
                if (args.length === 0 || args[0] === 0) {
                  for (i = _ref = this.y + 1, _ref2 = screen.length - 1; (_ref <= _ref2 ? i <= _ref2 : i >= _ref2); (_ref <= _ref2 ? i += 1 : i -= 1)) {
                    this.screen[i] = null;
                  }
                  for (i = _ref3 = this.x, _ref4 = screen[this.y].length - 1; (_ref3 <= _ref4 ? i <= _ref4 : i >= _ref4); (_ref3 <= _ref4 ? i += 1 : i -= 1)) {
                    this.screen[this.y][i] = null;
                  }
                } else if (args[0] === 1) {
                  for (i = 0, _ref5 = this.y - 1; (0 <= _ref5 ? i <= _ref5 : i >= _ref5); (0 <= _ref5 ? i += 1 : i -= 1)) {
                    this.screen[i] = null;
                  }
                  for (i = 0, _ref6 = this.x; (0 <= _ref6 ? i <= _ref6 : i >= _ref6); (0 <= _ref6 ? i += 1 : i -= 1)) {
                    this.screen[this.y][i] = null;
                  }
                } else if (args[0] === 2) {
                  this.x = 0;
                  this.y = 0;
                  this.screen = [];
                }
                break;
              case "K":
                if (args.length === 0 || args[0] === 0) {
                  for (i = _ref7 = this.x, _ref8 = this.screen[this.y].length - 1; (_ref7 <= _ref8 ? i <= _ref8 : i >= _ref8); (_ref7 <= _ref8 ? i += 1 : i -= 1)) {
                    this.screen[this.y][i] = null;
                  }
                } else if (args[0] === 1) {
                  for (i = 0, _ref9 = this.x; (0 <= _ref9 ? i <= _ref9 : i >= _ref9); (0 <= _ref9 ? i += 1 : i -= 1)) {
                    this.screen[this.y][i] = null;
                  }
                } else if (args[0] === 2) {
                  this.screen[this.y] = null;
                }
            }
            this.argbuf = '';
            this.state = 0;
          } else {
            this.argbuf += ch;
          }
        } else if (this.state === 3) {
          break;
        } else {
          this.state = 0;
        }
      }
      return _results;
    };
    ImageTextModeANSI.prototype.putpixel = function(ch) {
      if (!(this.screen[this.y] != null)) {
        this.screen[this.y] = [];
      }
      this.screen[this.y][this.x] = {
        ch: ch,
        attr: this.attr
      };
      if (++this.x >= this.linewrap) {
        this.x = 0;
        return this.y++;
      }
    };
    return ImageTextModeANSI;
  }).call(this);
  this.ImageTextModeBin = (function() {
    __extends(ImageTextModeBin, this.ImageTextMode);
    function ImageTextModeBin(options) {
      var k, v;
      ImageTextModeBin.__super__.constructor.apply(this, arguments);
      this.linewrap = 160;
      for (k in options) {
        if (!__hasProp.call(options, k)) continue;
        v = options[k];
        this[k] = v;
      }
    }
    ImageTextModeBin.prototype.parse = function(content) {
      var attr, ch, i, x, y, _ref, _results;
      x = 0;
      y = 0;
      this.screen[y] = [];
      _results = [];
      for (i = 0, _ref = content.length - 3; (0 <= _ref ? i <= _ref : i >= _ref); i += 2) {
        ch = content.substr(i, 1);
        if (ch === "\x1a") {
          break;
        }
        attr = this.getByteAt(content, i + 1);
        this.screen[y][x] = {
          'ch': ch,
          'attr': attr
        };
        x++;
        _results.push(x === this.linewrap ? (x = 0, y++, !(this.screen[y] != null) ? this.screen[y] = [] : void 0) : void 0);
      }
      return _results;
    };
    return ImageTextModeBin;
  }).call(this);
}).call(this);
